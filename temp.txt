using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Turnover
{
    public class UDPListener : UdpClient
    {
        public UDPListener(int listenPort, TextBox logTextBox, ListView usersListView) : base(listenPort)
        {
            this.listenPort = listenPort;
            this.logTextBox = logTextBox;

            this.localAddresses = GetUsedIP();
            this.usersOnline = new ObservableList<IPEndPoint>(usersListView);

            this.inviteEvent = new ManualResetEvent(false);
            
        }
        private void Log(string text,params object[] args)
        {
            this.logTextBox.Invoke(new Action(() =>
            {
                this.logTextBox.AppendText(string.Format(text, args) + Environment.NewLine);
            }));
        }

        public void SendMessage(string message)
        {
            foreach (UnicastIPAddressInformation UnicatIPInfo in localAddresses)
            {
                if (IPAddress.Parse(UnicatIPInfo.Address.ToString()).AddressFamily != AddressFamily.InterNetwork) continue;

                var broadcast = GetBroadcastIP(UnicatIPInfo);

                // Рассылаем сообщения
                Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
                byte[] sendbuf = Encoding.UTF8.GetBytes(message);
                IPEndPoint ep = new IPEndPoint(broadcast, listenPort);
                socket.SendTo(sendbuf, ep);
                socket.Close();

            }

        }

        public void StartListen()
        {
            try {
                this.BeginReceive(new AsyncCallback(recv), null);
                //this.Log("UDPListen start...");
            }
            catch (Exception ex) { MessageBox.Show(ex.Message + Environment.NewLine + ex.StackTrace); }

        }
        // Разослать приглашения
        public void SendInvites()
        {
            inviteThread = new Thread(Inviter);
            inviteThread.Start();
        }

        private void Inviter(object sender)
        {
            IPHostEntry host = Dns.GetHostEntry(Dns.GetHostName());
            IPAddress localIP = null;
            foreach (IPAddress ip in host.AddressList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork)
                {
                    localIP = ip;
                    break;
                }
            }

            UnicastIPAddressInformation local = localAddresses.Find(x => x.Address.Equals(localIP) );

            if (local == null) return;
            
            while (!inviteEvent.WaitOne(2000))
            {
                /*foreach (UnicastIPAddressInformation UnicatIPInfo in localAddresses)
                {
                    if (IPAddress.Parse(UnicatIPInfo.Address.ToString()).AddressFamily != AddressFamily.InterNetwork) continue;
                    
                    var broadcast = GetBroadcastIP(UnicatIPInfo);
                    // Рассылаем приглашения
                    Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);

                    string inviteMsg = "IM_ONLINE";
                    byte[] sendbuf = Encoding.UTF8.GetBytes(inviteMsg);
                    IPEndPoint ep = new IPEndPoint(broadcast, listenPort);
                    socket.SendTo(sendbuf, ep);
                    socket.Close();
                }*/

                

                var broadcast = GetBroadcastIP(local);
                // Рассылаем приглашения
                Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);

                string inviteMsg = "IM_ONLINE";
                byte[] sendbuf = Encoding.UTF8.GetBytes(inviteMsg);
                IPEndPoint ep = new IPEndPoint(broadcast, listenPort);
                socket.SendTo(sendbuf, ep);
                socket.Close();
            }
        }

        public void StopListener()
        {
            this.inviteEvent.Set();
            this.Close();
        }

        private void recv(IAsyncResult res)
        {
            if (res == null) return;
            try
            {
                IPEndPoint groupEP = new IPEndPoint(IPAddress.Any, listenPort);
                byte[] recived = this.EndReceive(res, ref groupEP);

                bool isLocal = false;

                foreach (var addr in localAddresses)
                    if (addr.Address.Equals(groupEP.Address))
                        isLocal = true;


                var dataRecived = Encoding.UTF8.GetString(recived, 0, recived.Length);

                if (!isLocal)
                {
                    


                }
                else
                {
                    // Log("THIS IS MINE LOCAL ADDR");

                    if (dataRecived.CompareTo("IM_ONLINE") == 0)
                    {

                        if (usersOnline.Find(x => x.Address.Equals(groupEP.Address)) == null)
                        {
                            usersOnline.Add(groupEP);
                            //Log("some one online");
                        }
                        /*else
                            Log("already in list");*/
                    }
                    else
                    {
                        this.Log("Received broadcast from {0} : {1}", groupEP.ToString(), dataRecived);
                    }

                }

                this.BeginReceive(new AsyncCallback(recv), null);
            }
                // Если закрыли может вывалится ошибка, т.к. будет доступ к несущ. объекту
            catch (ObjectDisposedException) {}
                // Отлавливаем остальные ошибки
            catch (Exception ex) { MessageBox.Show(ex.Message + Environment.NewLine + ex.StackTrace); }
        }
        // Получить все используемые айпи адреса на текущем компьютере.
        // Возвращается список адресов т.к. может быть много интерфесов (сетевых карт)
        public List<UnicastIPAddressInformation> GetUsedIP()
        {
            // Список айпи адресов привязанных ко всем картам текущего компьютера
            List<UnicastIPAddressInformation> localAddress = new List<UnicastIPAddressInformation>();

            string value = string.Empty;
            // Получаем все сетевые интерфесы
            NetworkInterface[] adapters = NetworkInterface.GetAllNetworkInterfaces();
            // Для каждого интерфейса 
            foreach (NetworkInterface adapter in adapters)
            {
                // Пропускаем системные
                if (adapter.NetworkInterfaceType == NetworkInterfaceType.Loopback) continue;
                if (adapter.OperationalStatus != OperationalStatus.Up) continue;
                // Получаем имя адаптера
                value = adapter.Name;
                //this.Log(adapter.Description);
                // Получаем список информации и адресов связанных с адаптером
                UnicastIPAddressInformationCollection UnicastIPInfoCol = adapter.GetIPProperties().UnicastAddresses;
                // Для каждой "информации"
                foreach (UnicastIPAddressInformation UnicatIPInfo in UnicastIPInfoCol)
                {
                    // Пропускаем системные
                    if (IPAddress.Parse(UnicatIPInfo.Address.ToString()).AddressFamily != AddressFamily.InterNetwork) continue;
                    // Запоминаем
                    localAddress.Add(UnicatIPInfo);
                    /*this.Log("\tIP Address is " + UnicatIPInfo.Address);
                    this.Log("\tSubnet Mask is " + UnicatIPInfo.IPv4Mask);*/
                }
            }
            // Возвращаем список
            return localAddress;
        }
        // Получаем широковещательный айпи для подсети по используемому локальному
        public IPAddress GetBroadcastIP(UnicastIPAddressInformation UnicatIPInfo)
        {
            // Calculate broadcast address for current interface
            var addressInt = BitConverter.ToInt32(UnicatIPInfo.Address.GetAddressBytes(), 0);
            var maskInt = BitConverter.ToInt32(UnicatIPInfo.IPv4Mask.GetAddressBytes(), 0);
            var broadcastInt = addressInt | ~maskInt;
            return new IPAddress(BitConverter.GetBytes(broadcastInt));
        }

        private ManualResetEvent inviteEvent = null;
        private Thread inviteThread = null;

        private List<UnicastIPAddressInformation> localAddresses;
        public ObservableList<IPEndPoint> usersOnline;
        //public List<UnicastIPAddressInformation> GetMi
        private int listenPort;
        private TextBox logTextBox;
    }
}
